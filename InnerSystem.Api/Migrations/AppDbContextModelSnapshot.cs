// <auto-generated />
using System;
using InnerSystem.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InnerSystem.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InnerSystem.Api.Entities.Base.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Assignment", b =>
                {
                    b.HasBaseType("InnerSystem.Api.Entities.Base.BaseEntity");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Comment", b =>
                {
                    b.HasBaseType("InnerSystem.Api.Entities.Base.BaseEntity");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Notification", b =>
                {
                    b.HasBaseType("InnerSystem.Api.Entities.Base.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Post", b =>
                {
                    b.HasBaseType("InnerSystem.Api.Entities.Base.BaseEntity");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Assignment", b =>
                {
                    b.HasOne("InnerSystem.Api.Entities.Base.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("InnerSystem.Api.Entities.Assignment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Comment", b =>
                {
                    b.HasOne("InnerSystem.Api.Entities.Base.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("InnerSystem.Api.Entities.Comment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnerSystem.Api.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Notification", b =>
                {
                    b.HasOne("InnerSystem.Api.Entities.Base.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("InnerSystem.Api.Entities.Notification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Post", b =>
                {
                    b.HasOne("InnerSystem.Api.Entities.Base.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("InnerSystem.Api.Entities.Post", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerSystem.Api.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
